{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","component/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","msg","About","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","data-bs-parent","border","App","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.03758359.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n   \r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n<div className=\"container-fluid\">\r\n  <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n      </li>   \r\n      <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n      </li>\r\n     </ul>\r\n    <form className=\"d-flex\" role=\"search\">\r\n      {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n      <button className=\"btn btn-primary\" type=\"submit\">Search</button> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\" />\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Enable Dark Mode</label>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired,\r\n                    about: PropTypes.string.isRequired}","import React, {useState} from 'react'\r\n\r\n \r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"uppercase was clicked\" + text );\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"Success\");\r\n    }\r\n    const handleLoClick = () =>{\r\n        // console.log(\"uppercase was clicked\" + text );\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"Success\");\r\n    }\r\n    const handleClearClick = () =>{\r\n        // console.log(\"uppercase was clicked\" + text );\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Clear text\", \"Success\");\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        // console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copy successfully\", \"Success\");\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"remove spaces successfully\", \"Success\");\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container mx-3\" style= {{color:  props.mode ==='dark'?'white':'black' }}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\" style= {{color:  props.mode ==='dark'?'white':'black' }}>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style= {{backgroundColor: props.mode ==='dark'?'gray':'white',color:  props.mode ==='dark'?'white':'black' }} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Extra space remove</button>\r\n        </div>\r\n        <div className=\"container my-4\" style= {{color:  props.mode ==='dark'?'white':'black' }}>\r\n            <h1> Your Text summary</h1>\r\n            <p> {text.split(\" \").length} word and {text.length} character</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter the text above in textarea\"}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    \r\n        props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n        </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","    import React, { useState } from 'react'\r\n\r\n    export default function About() {\r\n        const [myStyle, setMyStyle] = useState(\r\n            {\r\n            color: 'black',\r\n            backgroundColor : 'white'           \r\n\r\n            })\r\n            const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n           const toggleStyle =() =>{\r\n                if(myStyle.color === 'black'){\r\n                    setMyStyle({\r\n                        color: 'white',\r\n            backgroundColor : 'black',\r\n            border: '8px solid white'\r\n                    })\r\n                    setBtnText(\"Enable Light Mode\")\r\n                }\r\n                else{\r\n                setMyStyle({\r\n                    color: 'black',\r\n        backgroundColor : 'white'\r\n                })\r\n                setBtnText(\"Enable Dark Mode\")\r\n            }\r\n        }\r\n    return (\r\n        <div className='container' style= {myStyle}>\r\n            <h1 className='my-3'>About us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" style= {myStyle}>\r\n    <div className=\"accordion-item\" >\r\n        <h2 className=\"accordion-header\">\r\n        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            Accordion Item #1\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n            Accordion Item #2\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n            Accordion Item #3\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    <div className=\"contanier my-4 mx-4\">\r\n        <button onClick={toggleStyle} type=\"button\" className= \"btn btn-primary\">{btnText}</button>\r\n    </div>\r\n        </div>\r\n    )\r\n    }\r\n","import Navbar from \"./component/Navbar\";\nimport TextForm from \"./component/TextForm\";\nimport Alert from \"./component/Alert\";\nimport \"./App.css\";\nimport About from \"./component/About\";\nimport React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  // Link, \n  Routes\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n const showAlert = (message, type ) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>{\n      setAlert(null);\n    },3000)\n }\n  const toggleMode =() => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'gray';\n      showAlert(\"Dark mode has been enabled\", \"Success\");\n      document.title = 'Texttile - Darkmod';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\", \"Success\");\n      document.title = 'Texttile - Lightmod';\n    }\n  } \n  return (\n    \n    <>\n    \n    <Router>\n    <Navbar title=\"TextTile\" about=\"About\" mode={mode} toggleMode={toggleMode} /> \n    <Alert alert= {alert} />\n    <div className=\"container my-5\">\n    <Routes>\n        <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading= \"Enter Your Text Below\" mode={mode} />} />\n        <Route exact path=\"/about\" element={<About />} />\n        </Routes>\n    </div>\n    </Router>\n    </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}